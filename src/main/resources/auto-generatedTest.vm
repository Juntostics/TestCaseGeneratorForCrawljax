package /*Insert your package name*/

import static org.junit.Assert.assertTrue;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;
import com.crawljax.browser.EmbeddedBrowser;
import com.crawljax.browser.WebDriverBackedEmbeddedBrowser;
import com.google.common.collect.ImmutableSortedSet;
import java.util.SortedSet;
import java.util.TreeSet;
#foreach($import in $extractor.getImportList())
$import
#end


public class WebapplicationTest {

	private static WebDriver driver;
	private WebElement webelement;
	private Select selectElement;
	private static final long DEFAULT_WAIT_AFTER_RELOAD = 500;
	private static final long DEFAULT_WAIT_AFTER_EVENT = 500;
	
	

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		driver = new FirefoxDriver();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		driver.quit();
	}

	@Test
	public void replicate() throws Exception {
		driver.get($element.getUrl());
		
		#foreach($number in $element.getLoop())
		#if(!$element.FormInputIsEmpty())
		#foreach($formInputElement in $element.getFormInputElements())
		$formInputElement.generateFormInputCode();
		#end
		#end
		
		webelement = driver.findElement($element.popBy());
		webelement.click();
		#end
		
		WebDriverBackedEmbeddedBrowser browser = WebDriverBackedEmbeddedBrowser.withDriver(
		driver,generateFilterAttributes(), DEFAULT_WAIT_AFTER_RELOAD,DEFAULT_WAIT_AFTER_EVENT);
    	EmbeddedBrowser embeddedbrowser = (EmbeddedBrowser) browser;
    	Invariant userInvariant = genInvariant();
    	assertTrue(userInvariant.getInvariantCondition().check(embeddedbrowser));
	}
	
	private ImmutableSortedSet<String> generateFilterAttributes(){
		SortedSet<String> set = new TreeSet<String>();
		#foreach($filterattribute in $element.getFilterAttributes())
		set.add("${filterattribute}");
		#end
		return ImmutableSortedSet.copyOfSorted(set);
	}
		 
    $extractor.getGenerateInvariantSourcecode()
  
  	#foreach($string in $extractor.getExtractToTestCodeSourcecode())
  	$string
  	#end
  
	
}